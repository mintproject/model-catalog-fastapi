# coding: utf-8

from typing import Dict, List  # noqa: F401

from fastapi_cache import FastAPICache
from fastapi import (  # noqa: F401
    APIRouter,
    Body,
    Cookie,
    Depends,
    Form,
    Header,
    Path,
    Query,
    Response,
    Security,
    status,
)

from {{modelPackage}}.extra_models import TokenModel  # noqa: F401
from openapi_server.utils.vars import {{#lambda.uppercase}}{{baseName}}_type_name{{/lambda.uppercase}}, {{#lambda.uppercase}}{{baseName}}_type_uri{{/lambda.uppercase}}
from openapi_server.connector import query_manager
from fastapi_cache.decorator import cache

{{#imports}}
{{import}}
{{/imports}}
{{#securityImports.0}}from {{packageName}}.security_api import {{#securityImports}}get_token_{{.}}{{^-last}}, {{/-last}}{{/securityImports}}{{/securityImports.0}}

router = APIRouter()


{{#operations}}
{{#operation}}
@router.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(
    "{{path}}",
    responses={
        {{#responses}}
        {{code}}: {{=<% %>=}}{<%#dataType%>"model": <%dataType%>, "description": "<%message%>"<%/dataType%><%^dataType%>"description": "<%message%>"<%/dataType%>}<%={{ }}=%>,
        {{/responses}}
    },
    tags=[{{#tags}}"{{name}}"{{^-last}},{{/-last}}{{/tags}}],
    {{#summary}}
    summary="{{.}}",
    {{/summary}}
    {{#description}}
    description = "{{.}}",
    {{/description}}
    response_model_by_alias=True,
)
{{^hasAuthMethods}}
@cache(namespace="{{baseName}}", expire=1800)
{{/hasAuthMethods}}
async def {{operationId}}(
    {{#allParams}}
    {{>endpoint_argument_definition}},
    {{/allParams}}
    {{#hasAuthMethods}}
    {{#authMethods}}
    token_{{name}}: TokenModel = Security(
        get_token_{{name}}{{#isOAuth}}, scopes=[{{#scopes}}"{{scope}}"{{^-last}}, {{/-last}}{{/scopes}}]{{/isOAuth}}
    ),
    {{/authMethods}}
    {{/hasAuthMethods}}
) -> {{returnType}}{{^returnType}}None{{/returnType}}:
    {{#notes}}"""{{.}}"""
    
    {{#hasAuthMethods}}
    await FastAPICache.clear(namespace="{{baseName}}")
    {{/hasAuthMethods}}
    return query_manager.{{#lambda.lowercase}}{{httpMethod}}_resource{{/lambda.lowercase}}(
        {{#pathParams}}{{paramName}}={{paramName}},{{/pathParams}}
        {{#queryParams}}{{paramName}}={{paramName}},{{/queryParams}}
        {{#bodyParams}}body={{paramName}},{{/bodyParams}}
        rdf_type_uri={{#lambda.uppercase}}{{baseName}}_type_uri{{/lambda.uppercase}},
        rdf_type_name={{#lambda.uppercase}}{{baseName}}_type_name{{/lambda.uppercase}}, 
        kls={{baseName}}
        )
        {{/notes}}{{^notes}}...{{/notes}}
{{^-last}}


{{/-last}}
{{/operation}}
{{/operations}}

# coding: utf-8

{{>partial_header}}

from fastapi import FastAPI

{{#apiInfo}}
{{#apis}}
from {{apiPackage}}.{{classFilename}} import router as {{classname}}Router
{{/apis}}
{{/apiInfo}}

from fastapi_cache import FastAPICache
from fastapi_cache.backends.redis import RedisBackend
from fastapi_cache.decorator import cache
from redis import asyncio as aioredis

from fastapi.middleware.cors import CORSMiddleware

from openapi_server.settings import REDIS_ADDRESS

app = FastAPI(
    title="{{appName}}",
    description="{{appDescription}}",
    version="{{appVersion}}",
)
app.mount("{{appVersion}}", app)

origins = [
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

{{#apiInfo}}
{{#apis}}
app.include_router({{classname}}Router)
{{/apis}}
{{/apiInfo}}


@cache()
async def get_cache():
    return 1

@app.on_event("startup")
async def startup():
    redis = aioredis.from_url(f"redis://{REDIS_ADDRESS}", encoding="utf8", decode_responses=True)
    FastAPICache.init(RedisBackend(redis), prefix="fastapi-cache")
# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401

class CausalDiagramHasDiagramPartInner(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    CausalDiagramHasDiagramPartInner - a model defined in OpenAPI

        has_default_value: The has_default_value of this CausalDiagramHasDiagramPartInner [Optional].
        has_short_name: The has_short_name of this CausalDiagramHasDiagramPartInner [Optional].
        has_minimum_accepted_value: The has_minimum_accepted_value of this CausalDiagramHasDiagramPartInner [Optional].
        has_standard_variable: The has_standard_variable of this CausalDiagramHasDiagramPartInner [Optional].
        has_maximum_accepted_value: The has_maximum_accepted_value of this CausalDiagramHasDiagramPartInner [Optional].
        description: The description of this CausalDiagramHasDiagramPartInner [Optional].
        part_of_dataset: The part_of_dataset of this CausalDiagramHasDiagramPartInner [Optional].
        id: The id of this CausalDiagramHasDiagramPartInner [Optional].
        label: The label of this CausalDiagramHasDiagramPartInner [Optional].
        uses_unit: The uses_unit of this CausalDiagramHasDiagramPartInner [Optional].
        type: The type of this CausalDiagramHasDiagramPartInner [Optional].
        has_long_name: The has_long_name of this CausalDiagramHasDiagramPartInner [Optional].
        influences: The influences of this CausalDiagramHasDiagramPartInner [Optional].
    """

    has_default_value: Optional[List[VisualizationValueInner]] = Field(alias="hasDefaultValue", default=None)
    has_short_name: Optional[List[str]] = Field(alias="hasShortName", default=None)
    has_minimum_accepted_value: Optional[List[CatalogIdentifierHasMaximumAcceptedValueInner]] = Field(alias="hasMinimumAcceptedValue", default=None)
    has_standard_variable: Optional[List[StandardVariable]] = Field(alias="hasStandardVariable", default=None)
    has_maximum_accepted_value: Optional[List[CatalogIdentifierHasMaximumAcceptedValueInner]] = Field(alias="hasMaximumAcceptedValue", default=None)
    description: Optional[List[str]] = Field(alias="description", default=None)
    part_of_dataset: Optional[List[DatasetSpecification]] = Field(alias="partOfDataset", default=None)
    id: Optional[str] = Field(alias="id", default=None)
    label: Optional[List[str]] = Field(alias="label", default=None)
    uses_unit: Optional[List[Unit]] = Field(alias="usesUnit", default=None)
    type: Optional[List[str]] = Field(alias="type", default=None)
    has_long_name: Optional[List[str]] = Field(alias="hasLongName", default=None)
    influences: Optional[List[Process]] = Field(alias="influences", default=None)

    class Config:
        arbitrary_types_allowed = True
        allow_population_by_field_name = True

    @classmethod
    def __modify_schema__(cls, field_schema):
        field_schema.update(type='string')



from openapi_server.models.catalog_identifier_has_maximum_accepted_value_inner import CatalogIdentifierHasMaximumAcceptedValueInner
from openapi_server.models.dataset_specification import DatasetSpecification
from openapi_server.models.process import Process
from openapi_server.models.standard_variable import StandardVariable
from openapi_server.models.unit import Unit
from openapi_server.models.variable_presentation import VariablePresentation
from openapi_server.models.visualization_value_inner import VisualizationValueInner
CausalDiagramHasDiagramPartInner.update_forward_refs()
